
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    match /users/{userId} {
      // Any authenticated user can read any user's profile data.
      // This is needed for parents to view their managed students' names,
      // for users to view driver profiles, group member profiles, etc.
      allow read: if request.auth.uid != null;

      // Only the authenticated user can write to their own profile.
      // This also covers creation if we assume profiles are created by the user themselves
      // or during signup.
      allow write: if request.auth.uid == userId;
    }

    // Groups collection
    match /groups/{groupId} {
      allow read: if request.auth.uid != null; // Any authenticated user can read group details

      // Only authenticated users can create groups, and they become the initial admin/member.
      allow create: if request.auth.uid != null
                    && request.resource.data.createdBy == request.auth.uid
                    && request.auth.uid in request.resource.data.memberIds
                    && request.auth.uid in request.resource.data.adminIds
                    && request.resource.data.memberIds.size() == 1 // Initially only creator
                    && request.resource.data.adminIds.size() == 1;  // Initially only creator

      // Only group admins can update group details (name, description, image, memberIds, adminIds).
      allow update: if request.auth.uid != null 
                    && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.adminIds
                    && request.resource.data.diff(get(/databases/$(database)/documents/groups/$(groupId)).data).affectedKeys().hasOnly(['name', 'description', 'imageUrl', 'dataAiHint', 'memberIds', 'adminIds']);


      // Potentially only admins or creator can delete
      // allow delete: if request.auth.uid != null && request.auth.uid in resource.data.adminIds;
    }

    // Events collection
    match /events/{eventId} {
      allow read: if request.auth.uid != null; // Any authenticated user can read event details

      // Only authenticated users can create events
      allow create: if request.auth.uid != null 
                    && request.resource.data.createdBy == request.auth.uid
                    && request.resource.data.name is string && request.resource.data.name != ''
                    && request.resource.data.eventTimestamp is timestamp
                    && request.resource.data.location is string && request.resource.data.location != ''
                    && request.resource.data.eventType is string && request.resource.data.eventType != ''
                    && request.resource.data.associatedGroupIds is list // Can be empty list
                    && (request.resource.data.description == null || request.resource.data.description is string)
                    && request.resource.data.createdAt is timestamp;


      // Only the event creator can update event details
      allow update: if request.auth.uid != null 
                  && get(/databases/$(database)/documents/events/$(eventId)).data.createdBy == request.auth.uid
                  && request.resource.data.diff(get(/databases/$(database)/documents/events/$(eventId)).data).affectedKeys().hasOnly(['name', 'eventTimestamp', 'location', 'description', 'eventType', 'associatedGroupIds']);
      
      // Only the event creator can delete events
      // allow delete: if request.auth.uid != null && get(/databases/$(database)/documents/events/$(eventId)).data.createdBy == request.auth.uid;
    }
    
    // EventDriverStates collection
    match /eventDriverStates/{stateId} {
        // stateId is expected to be eventId_driverId
        // Driver can read/write their own state for an event.
        // Event creator might need read access to all states for their event.
        allow read: if request.auth.uid != null && (
           request.auth.uid == resource.data.driverId ||
           (exists(/databases/$(database)/documents/events/$(resource.data.eventId)) &&
            get(/databases/$(database)/documents/events/$(resource.data.eventId)).data.createdBy == request.auth.uid)
        );
        allow write: if request.auth.uid != null 
                     && request.auth.uid == request.resource.data.driverId
                     && request.resource.data.eventId is string
                     && request.resource.data.status is string
                     && (request.resource.data.seatsAvailable == null || request.resource.data.seatsAvailable is number)
                     && request.resource.data.updatedAt is timestamp;
    }

    // Rydz collection
    match /rydz/{rydId} {
      // Allow create if user is authenticated and is the one requesting, with basic data validation
      allow create: if request.auth.uid != null 
                    && request.auth.uid == request.resource.data.requestedBy
                    && request.resource.data.destination is string && request.resource.data.destination != ""
                    && request.resource.data.pickupLocation is string && request.resource.data.pickupLocation != ""
                    && request.resource.data.rydTimestamp is timestamp
                    && request.resource.data.earliestPickupTimestamp is timestamp
                    && request.resource.data.status is string
                    && request.resource.data.passengerIds is list && request.resource.data.passengerIds.size() > 0
                    && request.resource.data.createdAt is timestamp
                    && (request.resource.data.eventId == null || request.resource.data.eventId is string)
                    && (request.resource.data.eventName == null || request.resource.data.eventName is string)
                    && (request.resource.data.notes == null || request.resource.data.notes is string)
                    && (request.resource.data.driverId == null || request.resource.data.driverId is string)
                    && (request.resource.data.updatedAt == null || request.resource.data.updatedAt is timestamp);

      // TODO: Define read, update, delete rules for rydz
      // Example: Allow user to read their own rydz, or rydz they are a passenger/driver for.
      // allow read: if request.auth.uid != null && (
      //   request.auth.uid == resource.data.requestedBy ||
      //   request.auth.uid == resource.data.driverId ||
      //   request.auth.uid in resource.data.passengerIds
      // );
      // allow update: if ... (e.g. driver can update status, requester can cancel)
    }
  }
}
