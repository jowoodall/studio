
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(docUserId) {
      return request.auth.uid == docUserId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // TEMPORARY DEBUG - Allows ANYONE to read user profiles. REVERT AFTER TESTING!
      allow read: if true;
      // Only the authenticated user can create their own profile initially, or an admin can.
      allow create: if isOwner(userId) || isAdmin();
      // Only the authenticated user can update their own profile, or an admin can.
      allow update: if isOwner(userId) || isAdmin();
      // Generally, users should not be able to delete profiles directly.
      allow delete: if isAdmin();
    }

    // Rules for the 'groups' collection
    match /groups/{groupId} {
      allow read: if request.auth.uid != null; // Any authenticated user can read group details
      allow create: if request.auth.uid != null && request.resource.data.createdBy == request.auth.uid
                      && request.resource.data.adminIds[0] == request.auth.uid // Creator must be first admin
                      && request.resource.data.memberIds[0] == request.auth.uid; // Creator must be first member
      allow update: if request.auth.uid != null && (
                      (exists(/databases/$(database)/documents/groups/$(groupId)) && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.adminIds) || isAdmin()
                    );
      allow delete: if request.auth.uid != null && (
                      (exists(/databases/$(database)/documents/groups/$(groupId)) && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.adminIds) || isAdmin()
                    );
    }

    // Rules for the 'events' collection
    match /events/{eventId} {
      allow read: if request.auth.uid != null; // Any authenticated user can read event details
      allow create: if request.auth.uid != null && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth.uid != null && (
                      (exists(/databases/$(database)/documents/events/$(eventId)) && get(/databases/$(database)/documents/events/$(eventId)).data.createdBy == request.auth.uid) || isAdmin()
                    );
      allow delete: if request.auth.uid != null && (
                      (exists(/databases/$(database)/documents/events/$(eventId)) && get(/databases/$(database)/documents/events/$(eventId)).data.createdBy == request.auth.uid) || isAdmin()
                    );
    }

    // Rules for 'rydz' (Ryd Requests)
    match /rydz/{rydId} {
      allow read: if request.auth.uid != null && (
                    isOwner(get(/databases/$(database)/documents/rydz/$(rydId)).data.requestedBy) ||
                    (get(/databases/$(database)/documents/rydz/$(rydId)).data.driverId != null && isOwner(get(/databases/$(database)/documents/rydz/$(rydId)).data.driverId)) ||
                    isAdmin()
                  );
      allow create: if request.auth.uid != null && isOwner(request.resource.data.requestedBy)
                      && request.resource.data.status == 'requested';
      allow update: if request.auth.uid != null && (
                      isOwner(get(/databases/$(database)/documents/rydz/$(rydId)).data.requestedBy) ||
                      (get(/databases/$(database)/documents/rydz/$(rydId)).data.driverId != null && isOwner(get(/databases/$(database)/documents/rydz/$(rydId)).data.driverId)) ||
                      isAdmin()
                    );
      // Add delete rules if necessary, typically restricted
      allow delete: if request.auth.uid != null && (
                      isOwner(get(/databases/$(database)/documents/rydz/$(rydId)).data.requestedBy) || isAdmin()
                    );
    }

    // Rules for 'activeRydz' (Offered/In-Progress Rydz)
    match /activeRydz/{activeRydId} {
      allow read: if request.auth.uid != null; // Any authenticated user can read active rydz, can be restricted further
      allow create: if request.auth.uid != null
                    // Driver must be authenticated and their canDrive must be true
                    && get(/databases/$(database)/documents/users/$(request.resource.data.driverId)).data.canDrive == true
                    // Event location must exist and be non-empty
                    && get(/databases/$(database)/documents/events/$(request.resource.data.associatedEventId)).data.location != ''
                    // Start location must be non-empty
                    && request.resource.data.startLocationAddress != ''
                    // Passenger capacity must be a string "1"-"8"
                    && request.resource.data.vehicleDetails.passengerCapacity in ['1', '2', '3', '4', '5', '6', '7', '8']
                    // Ensure the creator is the driver
                    && request.resource.data.driverId == request.auth.uid
                    // Status must be planning
                    && request.resource.data.status == 'planning'
                    // Passenger manifest must be empty on creation
                    && request.resource.data.passengerManifest.size() == 0;

      allow update: if request.auth.uid != null && (
                      isOwner(get(/databases/$(database)/documents/activeRydz/$(activeRydId)).data.driverId) || isAdmin()
                      // Potentially allow passengers to update their specific manifest item status
                      // (e.g., || exists(get(/databases/$(database)/documents/activeRydz/$(activeRydId)).data.passengerManifest.filter(item => item.userId == request.auth.uid)))
                    );
      allow delete: if request.auth.uid != null && (
                      isOwner(get(/databases/$(database)/documents/activeRydz/$(activeRydId)).data.driverId) || isAdmin()
                    );
    }

    // Rules for 'eventDriverStates'
    match /eventDriverStates/{stateId} {
        // stateId is composite: eventId_driverId
        // Driver can update their own status, or an admin can
        allow read: if request.auth.uid != null; // Or more restrictive if needed
        allow write: if request.auth.uid != null && (
                        request.auth.uid == stateId.split('_')[1] || isAdmin()
                     );
    }
  }
}

    