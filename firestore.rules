
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read their own profile, but can create it.
    // They can only update their own profile, and cannot change their role or email.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }

    // A user can read a family document if they are a member of that family.
    // They can create a new family.
    // Only admins of a family can update it.
    match /families/{familyId} {
      allow read: if request.auth.uid in resource.data.memberIds;
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid in resource.data.adminIds;
    }

    // A user can read a group if they are a member.
    // Only admins can update a group.
    match /groups/{groupId} {
      allow read: if request.auth.uid in resource.data.memberIds;
      allow update: if request.auth.uid in resource.data.adminIds;
      allow create: if request.auth.uid != null;
    }

    // A user must be authenticated to interact with events.
    // For reads, we'll keep it open for now, assuming events are public.
    // For creation/updates, this should be locked down further (e.g., to group admins).
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid != null; // In a real app, restrict this to managers
    }
    
    // Ryd Requests can be read by any authenticated user for now.
    // They can only be created or updated by the user who requested it.
    match /rydz/{rydId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid == resource.data.requestedBy;
    }
    
    // Active Rydz can be read by the driver or any passenger.
    // Updates should be handled by server-side actions, so we can lock this down.
    match /activeRydz/{rydId} {
       allow read: if request.auth.uid == resource.data.driverId || request.auth.uid in resource.data.passengerUids;
       // Writes should be handled by server-side logic (actions) for security
       allow write: if false; 
    }
    
    // Notifications are private to the user.
    match /notifications/{notificationId} {
       allow read, write: if request.auth.uid == resource.data.userId;
    }

  }
}
