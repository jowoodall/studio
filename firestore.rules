
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.role is string &&
                       (request.resource.data.role == 'student' || request.resource.data.role == 'parent' || request.resource.data.role == 'admin') &&
                       request.resource.data.fullName is string && request.resource.data.fullName != '' &&
                       request.resource.data.createdAt is timestamp;
      allow update: if request.auth.uid == userId;
      // Deny delete for now to prevent accidental deletion
      allow delete: if false;
    }
    match /groups/{groupId} {
      allow read: if request.auth.uid != null; // Any authenticated user can read group list/details
      allow create: if request.auth.uid != null &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.name is string && request.resource.data.name != '' &&
                       request.resource.data.description is string && request.resource.data.description != '' &&
                       request.resource.data.memberIds is list && request.resource.data.memberIds.hasAny([request.auth.uid]) &&
                       request.resource.data.adminIds is list && request.resource.data.adminIds.hasAny([request.auth.uid]) &&
                       request.resource.data.createdAt is timestamp;
      allow update: if request.auth.uid != null && resource.data.adminIds.hasAny([request.auth.uid]);
    }
    match /events/{eventId} {
      allow read: if request.auth.uid != null;
      allow create: if request.auth.uid != null &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.name is string && request.resource.data.name != '' &&
                       request.resource.data.location is string && request.resource.data.location != '' &&
                       request.resource.data.eventTimestamp is timestamp &&
                       request.resource.data.eventType is string && request.resource.data.eventType != '' &&
                       request.resource.data.createdAt is timestamp &&
                       request.resource.data.associatedGroupIds is list;
      allow update: if request.auth.uid != null && resource.data.createdBy == request.auth.uid; // Only creator can update
    }
    match /eventDriverStates/{stateId} {
      allow read: if request.auth.uid != null; // Or more specific if needed
      allow write: if request.auth.uid != null && request.resource.data.driverId == request.auth.uid; // Only the driver can update their own status
    }

    match /rydz/{rydId} {
      // SIMPLIFIED RULE FOR DEBUGGING:
      allow create: if request.auth.uid != null &&
                       request.resource.data.requestedBy == request.auth.uid;

      // Original more restrictive rule (commented out for now):
      // allow create: if request.auth.uid != null &&
      //                  request.resource.data.requestedBy == request.auth.uid &&
      //                  request.resource.data.destination is string && request.resource.data.destination != "" &&
      //                  request.resource.data.pickupLocation is string && request.resource.data.pickupLocation != "" &&
      //                  request.resource.data.rydTimestamp is timestamp &&
      //                  request.resource.data.earliestPickupTimestamp is timestamp &&
      //                  request.resource.data.status is string &&
      //                  request.resource.data.passengerIds is list && request.resource.data.passengerIds.size() > 0 &&
      //                  request.resource.data.createdAt is timestamp &&
      //                  (request.resource.data.eventId == null || request.resource.data.eventId is string) &&
      //                  (request.resource.data.eventName == null || request.resource.data.eventName is string) &&
      //                  (request.resource.data.notes == null || request.resource.data.notes is string) &&
      //                  (request.resource.data.driverId == null || request.resource.data.driverId is string) &&
      //                  (request.resource.data.updatedAt == null || request.resource.data.updatedAt is timestamp);

      allow read: if request.auth.uid != null; // Placeholder, refine later
      allow update: if request.auth.uid != null; // Placeholder, refine later
      allow delete: if false; // Placeholder, refine later
    }
  }
}
