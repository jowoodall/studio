
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(resourceUserId) {
      return request.auth.uid != null && request.auth.uid == resourceUserId;
    }
    
    // Helper function to check if a user is a member of a group
    function isGroupMember(groupId) {
      // Check if the group document exists and has memberIds before trying to access memberIds
      let groupDoc = get(/databases/$(database)/documents/groups/$(groupId));
      return request.auth.uid != null && groupDoc.data.memberIds != null && request.auth.uid in groupDoc.data.memberIds;
    }

    // Helper function to check if a user is an admin of a group
    function isGroupAdmin(groupId) {
      // Check if the group document exists and has adminIds before trying to access adminIds
      let groupDoc = get(/databases/$(database)/documents/groups/$(groupId));
      return request.auth.uid != null && groupDoc.data.adminIds != null && request.auth.uid in groupDoc.data.adminIds;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth.uid != null; // Any authenticated user can read any user profile
      allow create: if request.auth.uid == userId && 
                      request.resource.data.email == request.auth.token.email &&
                      request.resource.data.uid == userId &&
                      request.resource.data.role in ['student', 'parent', 'admin'] && // Add driver if it's a selectable role at signup
                      request.resource.data.fullName is string && request.resource.data.fullName.size() > 0 &&
                      !(request.resource.data.canDrive == true && 
                        (request.resource.data.driverDetails == null || 
                         request.resource.data.driverDetails.primaryVehicle == null || request.resource.data.driverDetails.primaryVehicle == "" ||
                         request.resource.data.driverDetails.passengerCapacity == null || !request.resource.data.driverDetails.passengerCapacity.matches("^[1-8]$")
                        )
                       ); // If canDrive is true, ensure primaryVehicle and passengerCapacity are set and valid.
                      // Additional required fields for profile creation can be added here.
      allow update: if request.auth.uid == userId || isAdmin(); // User can update their own profile, or an admin can
                     // Ensure role is not changed by non-admins, ensure email is not changed, etc.
                     // Example: Prevent role change by user: !(request.resource.data.role != resource.data.role && !isAdmin())
      allow delete: if isAdmin(); // Only admins can delete user profiles
    }

    // Groups Collection
    match /groups/{groupId} {
      allow read: if request.auth.uid != null; // Authenticated users can read group details (e.g., for listing)
      allow create: if request.auth.uid != null && 
                      request.resource.data.createdBy == request.auth.uid &&
                      request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                      request.resource.data.memberIds.hasOnly([request.auth.uid]) && // Creator is the only member initially
                      request.resource.data.adminIds.hasOnly([request.auth.uid]);    // Creator is the only admin initially
      allow update: if (isGroupAdmin(groupId) || isAdmin()) &&
                      !(request.resource.data.createdBy != resource.data.createdBy); // Prevent changing createdBy
                      // Add more specific field update rules if needed (e.g. only admin can change name)
      allow delete: if isGroupAdmin(groupId) || isAdmin();
    }

    // Events Collection
    match /events/{eventId} {
      allow read: if request.auth.uid != null; // Any authenticated user can read event details
      allow create: if request.auth.uid != null && 
                      request.resource.data.createdBy == request.auth.uid &&
                      request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                      request.resource.data.location is string && request.resource.data.location.size() > 0 &&
                      request.resource.data.eventTimestamp is timestamp;
      allow update: if (request.auth.uid == resource.data.createdBy || isAdmin()) &&
                       !(request.resource.data.createdBy != resource.data.createdBy); // Prevent changing createdBy
      allow delete: if request.auth.uid == resource.data.createdBy || isAdmin();
    }
    
    // Rydz (Ryd Requests) Collection
    match /rydz/{rydId} {
      allow read: if request.auth.uid != null && (request.auth.uid == resource.data.requestedBy || (resource.data.passengerIds != null && request.auth.uid in resource.data.passengerIds) || request.auth.uid == resource.data.driverId || isAdmin());
      allow create: if request.auth.uid != null && 
                      request.auth.uid == request.resource.data.requestedBy &&
                      request.resource.data.destination is string && request.resource.data.destination.size() > 0 &&
                      request.resource.data.pickupLocation is string && request.resource.data.pickupLocation.size() > 0 &&
                      request.resource.data.rydTimestamp is timestamp &&
                      request.resource.data.earliestPickupTimestamp is timestamp &&
                      request.resource.data.status == 'requested' &&
                      (request.resource.data.passengerIds != null && request.resource.data.passengerIds.size() > 0 && request.auth.uid in request.resource.data.passengerIds); // Requester or their student must be a passenger
                      // Add check for valid eventId if present: (request.resource.data.eventId == null || exists(/databases/$(database)/documents/events/$(request.resource.data.eventId)))
      allow update: if request.auth.uid != null && (request.auth.uid == resource.data.requestedBy || request.auth.uid == resource.data.driverId || isAdmin()) &&
                      !(request.resource.data.requestedBy != resource.data.requestedBy) && // Prevent changing requester
                      !(request.resource.data.createdAt != resource.data.createdAt); // Prevent changing createdAt
      allow delete: if request.auth.uid != null && (request.auth.uid == resource.data.requestedBy || isAdmin());
    }

    // ActiveRydz Collection (Offered/In-Progress Rydz)
    match /activeRydz/{activeRydId} {
      allow read: if request.auth.uid != null; // Broad read for now, refine as needed
      allow create: if request.auth.uid != null && 
                      request.auth.uid == request.resource.data.driverId &&
                      get(/databases/$(database)/documents/users/$(request.resource.data.driverId)).data.canDrive == true &&
                      (request.resource.data.associatedEventId == null || 
                       (get(/databases/$(database)/documents/events/$(request.resource.data.associatedEventId)).data.location != null &&
                        get(/databases/$(database)/documents/events/$(request.resource.data.associatedEventId)).data.location != "")) &&
                      request.resource.data.startLocationAddress is string && request.resource.data.startLocationAddress.size() > 0 &&
                      request.resource.data.finalDestinationAddress is string && request.resource.data.finalDestinationAddress.size() > 0 &&
                      request.resource.data.vehicleDetails.passengerCapacity.matches("^[1-8]$") &&
                      request.resource.data.status == "planning" &&
                      request.resource.data.passengerManifest.size() == 0 &&
                      request.resource.data.actualDepartureTime is timestamp;
                      
      allow update: if request.auth.uid != null && (request.auth.uid == resource.data.driverId || isAdmin()) &&
                      !(request.resource.data.driverId != resource.data.driverId) && // Prevent changing driverId
                      !(request.resource.data.createdAt != resource.data.createdAt);  // Prevent changing createdAt
      allow delete: if request.auth.uid != null && (request.auth.uid == resource.data.driverId || isAdmin());
    }

    // EventDriverStates Collection
    match /eventDriverStates/{stateId} {
      allow read: if request.auth.uid != null;
      allow create, update: if request.auth.uid != null && 
                              request.auth.uid == request.resource.data.driverId &&
                              stateId.split('_')[0] == request.resource.data.eventId && // Ensure ID parts match doc data
                              stateId.split('_')[1] == request.resource.data.driverId;
      allow delete: if request.auth.uid != null && (request.auth.uid == resource.data.driverId || isAdmin()); 
    }
  }
}

    