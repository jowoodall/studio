
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for user profiles
    match /users/{userId} {
      // Allow users to read their own profile and other basic profiles if authenticated
      allow read: if request.auth.uid != null;
      // Allow users to create their own profile (e.g., on signup)
      allow create: if request.auth.uid != null && request.auth.uid == userId;
      // Allow users to update their own profile
      allow update: if request.auth.uid != null && request.auth.uid == userId;
      // Generally, disallow direct deletion of user profiles from client
      allow delete: if false;
    }

    // Rules for groups
    match /groups/{groupId} {
      allow read: if request.auth.uid != null; // Any authenticated user can read group details
      allow create: if request.auth.uid != null 
                    && request.auth.uid == request.resource.data.createdBy
                    && request.resource.data.name is string && request.resource.data.name.size() > 0
                    && request.resource.data.description is string
                    && request.resource.data.memberIds is list && request.resource.data.memberIds.size() > 0 && request.auth.uid in request.resource.data.memberIds
                    && request.resource.data.adminIds is list && request.resource.data.adminIds.size() > 0 && request.auth.uid in request.resource.data.adminIds;
      allow update: if request.auth.uid != null && request.auth.uid in resource.data.adminIds; // Only group admins can update
      allow delete: if request.auth.uid != null && request.auth.uid in resource.data.adminIds; // Only group admins can delete
    }

    // Rules for events
    match /events/{eventId} {
      allow read: if request.auth.uid != null; // Any authenticated user can read event details
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth.uid != null && request.auth.uid == resource.data.createdBy; // Only event creator can update
      allow delete: if request.auth.uid != null && request.auth.uid == resource.data.createdBy; // Only event creator can delete
    }

    // Rules for event driver states
    match /eventDriverStates/{stateId} {
        allow read: if request.auth.uid != null;
        allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.driverId;
        allow update: if request.auth.uid != null && request.auth.uid == resource.data.driverId;
        allow delete: if false; // Or based on specific conditions like event creator
    }

    // Rules for rydz (rides)
    match /rydz/{rydId} {
      allow read: if request.auth.uid != null; // Define more specific read rules later (e.g., involved users)
      
      // Allow authenticated users to create ryd requests if they are the requester
      allow create: if request.auth.uid != null
        && request.auth.uid == request.resource.data.requestedBy
        && request.resource.data.destination is string && request.resource.data.destination.size() > 0
        && request.resource.data.pickupLocation is string && request.resource.data.pickupLocation.size() > 0
        && request.resource.data.rydTimestamp is timestamp
        && request.resource.data.earliestPickupTimestamp is timestamp
        && request.resource.data.status is string && request.resource.data.status == "requested"
        && request.resource.data.passengerIds is list && request.resource.data.passengerIds.size() > 0
        && (request.resource.data.notes == null || request.resource.data.notes is string)
        // Correct way to validate serverTimestamp on create:
        && request.resource.data.createdAt == request.time 
        && (request.resource.data.eventId == null || request.resource.data.eventId is string)
        && (request.resource.data.eventName == null || request.resource.data.eventName is string)
        // Ensure no unexpected fields are being sent and basic field count.
        // Max number of fields in your RydData (excluding id, updatedAt which are not set on client create typically)
        // requestedBy, eventId, eventName, destination, pickupLocation, rydTimestamp, earliestPickupTimestamp, status, passengerIds, notes, createdAt
        // Total 11 fields are expected. DriverId is optional.
        && request.resource.data.keys().hasAll(['requestedBy', 'destination', 'pickupLocation', 'rydTimestamp', 'earliestPickupTimestamp', 'status', 'passengerIds', 'createdAt'])
        && request.resource.data.keys().size() >= 8 && request.resource.data.keys().size() <= 11;


      allow update: if request.auth.uid != null; // Define more specific update rules later (e.g., requester or driver)
      allow delete: if request.auth.uid != null; // Define more specific delete rules later
    }

  }
}
