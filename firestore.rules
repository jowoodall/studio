
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for user profiles
    match /users/{userId} {
      // Allow users to read their own profile and other basic profiles if authenticated
      allow read: if request.auth.uid != null;
      // Allow users to create their own profile (e.g., on signup)
      allow create: if request.auth.uid != null && request.auth.uid == userId;
      // Allow users to update their own profile
      allow update: if request.auth.uid != null && request.auth.uid == userId;
      // Generally, disallow direct deletion of user profiles from client
      allow delete: if false;
    }

    // Rules for groups
    match /groups/{groupId} {
      allow read: if request.auth.uid != null; // Any authenticated user can read group details
      allow create: if request.auth.uid != null 
                    && request.auth.uid == request.resource.data.createdBy
                    && request.resource.data.name is string && request.resource.data.name.size() > 0
                    && request.resource.data.description is string
                    && request.resource.data.memberIds is list && request.resource.data.memberIds.size() > 0 && request.auth.uid in request.resource.data.memberIds
                    && request.resource.data.adminIds is list && request.resource.data.adminIds.size() > 0 && request.auth.uid in request.resource.data.adminIds;
      allow update: if request.auth.uid != null && request.auth.uid in resource.data.adminIds; // Only group admins can update
      allow delete: if request.auth.uid != null && request.auth.uid in resource.data.adminIds; // Only group admins can delete
    }

    // Rules for events
    match /events/{eventId} {
      allow read: if request.auth.uid != null; // Any authenticated user can read event details
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth.uid != null && request.auth.uid == resource.data.createdBy; // Only event creator can update
      allow delete: if request.auth.uid != null && request.auth.uid == resource.data.createdBy; // Only event creator can delete
    }

    // Rules for event driver states
    match /eventDriverStates/{stateId} {
        allow read: if request.auth.uid != null;
        allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.driverId;
        allow update: if request.auth.uid != null && request.auth.uid == resource.data.driverId;
        allow delete: if false; // Or based on specific conditions like event creator
    }

    // Rules for rydz (requests)
    match /rydz/{rydId} {
      // Allow read if the user is the one who requested it, or an admin (future).
      allow read: if request.auth.uid != null && request.auth.uid == resource.data.requestedBy; 
                  // Add other roles/conditions if needed e.g. || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      
      allow create: if request.auth.uid != null
        && request.auth.uid == request.resource.data.requestedBy
        && request.resource.data.destination is string && request.resource.data.destination.size() > 0
        && request.resource.data.pickupLocation is string && request.resource.data.pickupLocation.size() > 0
        && request.resource.data.rydTimestamp is timestamp
        && request.resource.data.earliestPickupTimestamp is timestamp
        && request.resource.data.status is string && request.resource.data.status == "requested"
        && request.resource.data.passengerIds is list && request.resource.data.passengerIds.size() > 0
        && (request.resource.data.notes == null || request.resource.data.notes is string)
        && request.resource.data.createdAt == request.time 
        && (request.resource.data.eventId == null || request.resource.data.eventId is string)
        && (request.resource.data.eventName == null || request.resource.data.eventName is string)
        && request.resource.data.keys().hasAll(['requestedBy', 'destination', 'pickupLocation', 'rydTimestamp', 'earliestPickupTimestamp', 'status', 'passengerIds', 'createdAt'])
        && request.resource.data.keys().size() >= 8 && request.resource.data.keys().size() <= 11;

      // Allow update only by the requester, and only specific fields
      allow update: if request.auth.uid != null && request.auth.uid == resource.data.requestedBy
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'notes', 'updatedAt', 'assignedActiveRydId', 'driverId']); // Add other updatable fields
      
      // Allow delete only by the requester if status is 'requested'
      allow delete: if request.auth.uid != null && request.auth.uid == resource.data.requestedBy && resource.data.status == 'requested';
    }

    // Rules for activeRydz (actual ryd offers/trips)
    match /activeRydz/{activeRydId} {
      // Create: Authenticated users who are drivers can create.
      allow create: if request.auth.uid != null
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.canDrive == true
                    && request.auth.uid == request.resource.data.driverId
                    && request.resource.data.associatedEventId is string
                    && request.resource.data.status is string 
                    && request.resource.data.vehicleDetails is map
                    && request.resource.data.vehicleDetails.passengerCapacity is string
                    && request.resource.data.passengerManifest is list
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.actualDepartureTime is timestamp
                    && (request.resource.data.startLocationAddress is string || request.resource.data.startLocationAddress == null)
                    && request.resource.data.finalDestinationAddress is string
                    && (request.resource.data.notes is string || request.resource.data.notes == null)
                    && request.resource.data.keys().hasAll(['driverId', 'associatedEventId', 'status', 'vehicleDetails', 'passengerManifest', 'createdAt', 'actualDepartureTime', 'finalDestinationAddress'])
                    && request.resource.data.keys().size() >= 8 && request.resource.data.keys().size() <= 12;


      // Read: Allow any authenticated user to read (for listing/discovery purposes).
      // More specific rules might be needed later if some ActiveRydz should be private.
      allow read: if request.auth.uid != null;

      // Update: Only the assigned driver can update.
      allow update: if request.auth.uid != null && request.auth.uid == resource.data.driverId
                    // Prevent changing immutable fields like driverId, associatedEventId, createdAt
                    && request.resource.data.driverId == resource.data.driverId
                    && request.resource.data.associatedEventId == resource.data.associatedEventId
                    && request.resource.data.createdAt == resource.data.createdAt
                    // Validate passengerManifest structure if present in update
                    && (request.resource.data.passengerManifest == null || 
                        (request.resource.data.passengerManifest is list && 
                         request.resource.data.passengerManifest.all(item, 
                            item.userId is string &&
                            item.originalRydRequestId is string &&
                            item.pickupAddress is string &&
                            item.destinationAddress is string &&
                            item.status is string &&
                            (item.pickupOrder == null || item.pickupOrder is number) &&
                            (item.dropoffOrder == null || item.dropoffOrder is number) &&
                            (item.estimatedPickupTime == null || item.estimatedPickupTime is timestamp) &&
                            (item.actualPickupTime == null || item.actualPickupTime is timestamp) &&
                            (item.estimatedDropoffTime == null || item.estimatedDropoffTime is timestamp) &&
                            (item.actualDropoffTime == null || item.actualDropoffTime is timestamp) &&
                            (item.notes == null || item.notes is string)
                         )
                        )
                       )
                    // Ensure only specific fields are being updated
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                         'status', 'updatedAt', 'actualDepartureTime', 'estimatedCompletionTime', 
                         'startLocationAddress', 'finalDestinationAddress', 'routePolyline', 
                         'passengerManifest', 'notes', 'vehicleDetails' // vehicleDetails if driver can update mid-ryd in emergency
                       ]);

      // Delete: Generally, rydz shouldn't be outright deleted by clients.
      allow delete: if false;
    }
  }
}

    